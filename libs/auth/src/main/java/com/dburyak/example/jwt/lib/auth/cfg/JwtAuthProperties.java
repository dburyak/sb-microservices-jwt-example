package com.dburyak.example.jwt.lib.auth.cfg;

import io.jsonwebtoken.security.Keys;
import jakarta.annotation.Nullable;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.Value;
import lombok.experimental.NonFinal;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.validator.constraints.time.DurationMin;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.bind.ConstructorBinding;
import org.springframework.boot.context.properties.bind.DefaultValue;
import org.springframework.validation.annotation.Validated;

import java.time.Duration;
import java.util.Map;
import java.util.Set;

import static java.nio.charset.StandardCharsets.UTF_8;
import static java.util.Arrays.stream;
import static java.util.stream.Collectors.toMap;

@ConfigurationProperties(prefix = "auth.jwt")
@Validated
@Value
@NonFinal
public class JwtAuthProperties {

    /**
     * Whether to enable authentication using JWT tokens.
     */
    boolean enabled;

    /**
     * List of keys for verifying JWT tokens.
     * Has format @{code kid:alg:key, kid:alg:key, ...}. Example: {@code kid1:HS256:secret1, kid2:HS256:secret2}.
     */
    Map<String, Key> keys;

    /**
     * List of trusted issuers. Any JWT tokens with other issuers will be rejected.
     */
    Set<String> trustedIssuers;

    /**
     * Allowed clock skew for verifying JWT tokens.
     */
    Duration allowedClockSkew;

    /**
     * JWT custom claim that contains the list of roles.
     */
    String rolesKey;

    /**
     * JWT custom claim that contains the tenant id.
     */
    String tenantIdKey;

    /**
     * JWT token generation properties.
     */
    Generator generator;

    @ConstructorBinding
    public JwtAuthProperties(
            @DefaultValue("true") boolean enabled,
            @Nullable String keys,
            @DefaultValue("local.jwt.example.dburyak.com") @NotEmpty Set<String> trustedIssuers,
            @DefaultValue("30s") @NotNull Duration allowedClockSkew,
            @DefaultValue("r") @NotBlank String rolesKey,
            @DefaultValue("tid") @NotBlank String tenantIdKey,
            @DefaultValue Generator generator) {
        this.enabled = enabled;
        if (enabled) {
            if (StringUtils.isBlank(keys)) {
                throw new IllegalArgumentException("Keys must be set when JWT authentication is enabled");
            }
            this.keys = stream(keys.split("[\s,;]+"))
                    .map(JwtAuthProperties::parseKey)
                    .collect(toMap(
                            k -> k.kid,
                            k -> k
                    ));
        } else {
            this.keys = null;
        }
        this.trustedIssuers = trustedIssuers;
        this.allowedClockSkew = allowedClockSkew;
        this.rolesKey = rolesKey;
        this.tenantIdKey = tenantIdKey;
        this.generator = generator;
    }

    /**
     * JWT token generation properties.
     */
    @Value
    @NonFinal
    public static class Generator {

        /**
         * Whether the service needs to generate JWT tokens.
         */
        boolean enabled;

        /**
         * The key to use for signing JWT tokens in format {@code kid:alg:base64url(key)}.
         * Example: {@code a63fb07f:HS256:c29tZS1zZWNyZXQta2V5}.
         */
        Key key;

        /**
         * The issuer of the JWT token generated by this service.
         */
        String issuer;

        /**
         * The subject of the JWT token generated by this service.
         */
        String subject;

        /**
         * Token expiration time.
         */
        Duration ttl;

        @ConstructorBinding
        public Generator(
                @DefaultValue("false") boolean enabled,
                @Nullable String key,
                @DefaultValue("local.jwt.example.dburyak.com") @NotBlank String issuer,
                @Nullable String subject,
                @DefaultValue("1h") @NotNull @DurationMin(seconds = 1) Duration ttl) {
            this.enabled = enabled;
            if (enabled) {
                if (StringUtils.isBlank(key)) {
                    throw new IllegalArgumentException("Key must be set when JWT generation is enabled");
                }
                this.key = parseKey(key);
            } else {
                this.key = null;
            }
            this.issuer = issuer;
            if (enabled) {
                if (StringUtils.isBlank(subject)) {
                    throw new IllegalArgumentException("Subject must be set when JWT generation is enabled");
                }
                this.subject = subject;
            } else {
                this.subject = null;
            }
            this.ttl = ttl;
        }
    }

    @Value
    public static class Key {
        String kid;
        String alg;
        String key;

        public java.security.Key toJdkKey() {
            if (alg.equals("HS256")) {
                return Keys.hmacShaKeyFor(key.getBytes(UTF_8));
            } else {
                throw new IllegalArgumentException("Unsupported algorithm: " + alg);
            }
        }
    }

    private static Key parseKey(String keyStr) {
        String[] parts = keyStr.split(":");
        if (parts.length != 3) {
            throw new IllegalArgumentException("Invalid key format: " + keyStr);
        }
        return new Key(parts[0], parts[1], parts[2]);
    }
}
